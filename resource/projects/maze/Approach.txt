Notice this is already as a javadoc in the original source code in
MazeSolver.java!

Input:
Input can either be hardcoded or we can read it from a file. For this part it will be your decision. Another thing
is the characters presented, for the most part it is much easier for one to use numbers instead of ASCII chars, 
this allows us to manipulate the numbers easily (+, -, /, *).

Output:
One can output each tick (each recursive call) or we can just outout the original, then we instantly output our 
finished maze with the modifed array.

Storing Data:
One can store your data in many different ways, for example, for my part I used the Flood-Fill algo, which mostly
involves the usage of a queue or a stack. However, one doesn't have to do this and just use something like a Hashmap:
HashMap: Key: maze-val, Value: status (blocked, etc.)

Or

A simple 2D array which is much more primitive however this allows for much intensive actions to be executed in a short
amount of time (increase in time for runtime).

------

Basically after asking the teacher, it is required for the project to have at least FOUR recursive calls, I used these 4 
recursive calls for looking in the directions of the blocks near me in a way so:

       A
          +Y
       |  
   -X     +X
B  --  +  --  C
    
       |
          -Y
       D
       
Now there are many other ways to approach this, but for me one could quickly identify this could be solveable with a simple
implementation of a FF-algorithm (Flood-Fill), however one could also try a BFS-approach (although this seems counter-intuitive).

(To use a BFS-approach, one can simply just use a Queue inplace of a Stack when compared to the usage of a Flood-Fill implementation.)

Flood-Fill in simple terms is basically an algorithm that runs through the avaliable paths and literally fill them with a value.
Flood-Fill for our example will of course utilize 4 major recursive calls which will help us to walk in the directions:
1. Right
2. Left
3. Up
4. Down

Each of these directions will be checked and we will continously call this method to either backtrack
or move forward in that desired direction.

Whenever we traverse a spot where we have previously gone, we can the  mark that area with a final char, where our program will know to exclude when it is checking.

One can find a good pseudocode-ish implementation of this algorithm here: https://en.wikipedia.org/wiki/Flood_fill

Each of these will calls for each direction will fill each avaliable "open" path. Each time it is called, it will attempt
this recursive behavior for a N times or 1 time and thus proceed to whenever it finds the finish. 

However we cannot simply just move whenever there is an open space, we can then determine if such path is a "valid" path.

Given this we end with a time complexity of somewhere around O(nm) where n = rows & m = columns. However, the only thing you
have to watch out for is that you are allocating the resources properly without running into some kinda of stackoverflowerror, etc..
