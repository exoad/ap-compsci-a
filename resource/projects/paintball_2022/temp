/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package brains;

import arena.*;

import java.awt.Color;

/**
 * @author jmeng0814
 */
public class Amogus implements Brain {
    private static final int MAXDISTREGISTER = 13;
    private int row, col, myTeam, baseRow, baseCol, alignRow, alignRow2, moves = 0;
    private Player p;
    private boolean giveUp = false;

    public Amogus() {
        this.row = 0;
        this.col = 0;
        this.myTeam = -1;
        this.baseRow = 16;
        this.baseCol = -1;
        this.alignRow = -1;
        this.alignRow2 = -1;
    }

    private static int dist(int x1, int y1, int x2, int y2) {
        return (int) Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
    }

    @Override
    public String getCoder() {
        return "JackM";
    }

    @Override
    public String getName() {
        return "Amongoose";
    }

    @Override
    public Color getColor() {
        return Color.CYAN;
    }

    /**
     * If based on the correct moves
     * enable this player to register itself as either
     * a defender or offender.
     *
     * This register position is specific and hardcoded
     * based on the blocker valid regeneration
     *
     * It should also be noted that once a player
     * is registered as a defender, it will only
     * do as a defense instead of offense (bool)
     */
    public Action register(Player p, Board b) {
        Action t = null;
        /// pre-assert
        if(myTeam == -1) {
            myTeam = p.getTeam();
            baseCol = myTeam == 1 ? 49 : 0;
            alignRow = baseRow + 2;
            alignRow2 = baseRow - 2;
            giveUp = dist(p.getRow(), p.getCol(), baseCol, alignRow2) > MAXDISTREGISTER && dist(p.getRow(), p.getCol(), baseCol, alignRow) > MAXDISTREGISTER;
        }
        if(giveUp) {
            // run a shortest distance to the base algo
        } else {
            // defend
            
        }




        return t;
    }

    /*
     * T -> turn
     * M -> Move
     * S -> Shoot
     * P -> Pass
     * The basic approach here is that our bot will have
     */
    @Override
    public Action getMove(Player p, Board b) {
        return register(p, b);
    }
}
